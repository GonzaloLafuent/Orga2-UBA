target remote localhost:1234
b kernel.asm:124
c
source orga2.py
info gdt
q
target remote localhost:1234
b kernel.asm:136
c
q
target remote localhost:1234
b kernel.asm:126
c
source orga2.py
info gdt
; GDT_IDX_TASK_IDLE << 3
    mov ax,GDT_IDX_TASK_IDLE
b kernel.asm:133
c
s
s
q
target remote localhost:1234
b kernel.asm:135
c
s
c
q
target remote localhost:1234
b kernel.asm:135
r
s
start
c
s
s
s
s
s
s
s
s
s
s
r
c
q
target remote localhost:1234
b kernel.asm:135
c
s
s
s
s
s
s
s
s
s
r
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
target remote localhost:1234
b kernel.asm:135
c
s
s
fin
c
w
q
target remote localhost:1234
b kernel.asm:136
c
q
b kernel.asm:132
c
target remote localhost:1234
c
q
target remote localhost:1234
b kernel.asm:132
c
q
target remote localhost:1234
b kernel.asm:132
c
s
s
b kernel.asm:135
c
q
target remote localhost:1234
b kernel.asm:135
c
q
b kernel.asm:132
c
target remote localhost:1234
b kernel.asm:132
c
b kernel.asm:135
c
q
target remote localhost:1234
b kernel.asm:132
c
b kernel.asm:135
c
q
target remote localhost:1234
b kernel.asm:135
c
s
q
b _isr14
c
q
b _isr14
c
q
target remote localhost:1234
b kernel.asm:135
c
source orga2.py
gtd
gdt
info gdt
info tss
q
b _isr32

target remote localhost:1234
b _isr32
c
info tss
source orga2.py
info gdt
info tss
b _isr32
c
q
b _isr32
c
target remote localhost:1234
b _isr32
c
info creg
source orga2.py
info creg
info cregs
info reg
ni
ni
p $ax
p $ax>>3
ingo gdt
info gdt
ni
print esp
info registers
p $esp
p *((int*)$esp)
p *((int*)$esp-4)
p *((uint32_t*)$esp-4)
p *((int*)$esp+4)
p *((uint32_t*)$esp+4)
px
xp
xp $esp
xp *((uint32_t*)$esp+4)
xp ((uint32_t*)$esp)
info gdt
kernel reload
c
ni
p $eip
c
info page
q
targe remote localhost:1234
c
info page
source orga2.py
info page
kernel reload
c
info reg
kernel reload
c
b isr32
b _isr32
kernel reload
c
ni
ni
c
ni
p $ax
p $ax >> 3
info gdt
ni
c
info gdt
info page
kernel reload
c
clear
c
q
